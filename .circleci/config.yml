version: 2.1

orbs:
    bats: circleci/bats@1.1.0
    cli: circleci/circleci-cli@0.1.9
    ot: circleci/orb-tools@10.1.0
    shellcheck: circleci/shellcheck@3.1.1
    vr: kohirens/version-release@<< pipeline.parameters.orb_version >>

parameters:
    additional_files_file:
        default: "additional-files-to-commit.txt"
        description: Release automation
        type: string
    ctx_auto_release:
        default: "kohirens-automation"
        description: Release automation
        type: string
    ctx_docker_hub:
        default: "kohirens-automation-dockerhub"
        description: Container automation
        type: string
    orb_version:
        default: "dev:23f8d9cde7c279783e2493fc6242fe69d214e477"
        description: >
            The development version of the orb to test.
            This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
            A "dev:alpha" version must exist for the initial pipeline run.
        type: string
    orb_repo:
        default: "kohirens/version-release"
        description: Orb repository
        type: string
    run_integration_tests:
        type: boolean
        default: false
        description: Run integration tests
    triggered_flow:
        default: "workflow-selector"
        description: Workflow to be executed.
        type: string

executors:
    base:
        docker: # see https://circleci.com/developer/images/image/cimg/base#image-tags
            - image: cimg/base:current
              auth:
                  username: ${DH_USER}
                  password: ${DH_API_TOKEN}
        resource_class: small
    avr:
        docker:
            - image: kohirens/version-release:5.0.1
              auth:
                  username: ${DH_USER}
                  password: ${DH_API_TOKEN}
        resource_class: small

filter-semantic-tag: &filter-semantic-tag
    tags:
        only: /^v?\d+\.\d+\.\d+$/
    branches:
        ignore: /.*/

main-filter: &branches-to-skip
    branches:
        ignore: /main|auto-update-changelog/

pre-attach: &pre-attach
    - attach_workspace: { at: "." }

jobs:
    co:
        executor: base
        steps:
            - checkout
            - persist_to_workspace: { root: ".",  paths: [ "*" ] }

    orb-publish:
        parameters:
            ver_tag:
                default: "dev:alpha"
                description: version tag for the image
                type: string
            image_tag:
                default: "dev-alpha"
                type: string
        executor: cli/default
        steps:
            - attach_workspace: { at: "." }
            - run:
                  name: "Publish Orb"
                  command: |
                      # Update the placeholders in these files
                      sed -i -e "s/VERSION_RELEASE_IMAGE/<<parameters.image_tag>>/g" src/executors/default.yml
                      sed -i -e "s/VERSION_RELEASE_IMAGE/<<parameters.image_tag>>/g" src/jobs/publish-changelog.yml
                      sed -i -e "s/VERSION_RELEASE_IMAGE/<<parameters.image_tag>>/g" src/jobs/tag-and-release.yml
                      sed -i -e "s/VERSION_RELEASE_IMAGE/<<parameters.image_tag>>/g" src/jobs/workflow-selector.yml
                      sed -i -e "s/VERSION_RELEASE_IMAGE/<<parameters.image_tag>>/g" src/@orb.yml
                      sed -i -e "s/VERSION_RELEASE_IMAGE/<<parameters.image_tag>>/g" src/examples/auto-release.yml
                      BUILD_VER=<<parameters.ver_tag>>
                      if [ -z "${BUILD_VER}" ]; then
                        echo "no tag found in order to publish Orb"
                        exit 1
                      fi
                      circleci orb --skip-update-check pack src > orb.yml
                      circleci orb --skip-update-check validate orb.yml
                      circleci orb publish --skip-update-check orb.yml << pipeline.parameters.orb_repo >>@${BUILD_VER} --token ${CIRCLE_TOKEN}

    github-action-publish:
        executor: avr
        steps:
            - attach_workspace: { at: "." }
            - run:
                  name: "Generate GitHub Action files"
                  command: |
                      export GITHUB_API_URL="none"
                      # Update the selector.yaml workflow
                      next_version="$(git-cliff --bumped-version)"
                      if [ -z "${next_version}" ]; then
                        echo "no tag found in order to Generate GitHub Action files"
                        exit 1
                      fi
                      echo "next_version = ${next_version}"
                      sed -i -e "s/VERSION_RELEASE_IMAGE/${next_version}/g" .github/workflows/selector.yml
                      cat .github/workflows/selector.yml
                      # Start adding files to the list of files that should be committed.
                      echo ".github/workflows/selector.yml" > << pipeline.parameters.additional_files_file >>
                      echo ".github/workflows/selector.yml updated"
                      cat .github/workflows/selector.yml
                      echo ""
                      echo "additional files to commit"
                      cat << pipeline.parameters.additional_files_file >>
            - persist_to_workspace: { root: ".",  paths: [ "*" ] }

    integration-test-vr:
        executor: base
        environment:
            DOCKER_BUILDKIT: 1
        steps:
            - attach_workspace: { at: "." }
            - setup_remote_docker:
                  docker_layer_caching: true
            - run:
                  name: "Build mock server tests environment"
                  command: |
                      sudo apt-get install -y openssl
                      chmod +x ./.docker/gen-ss-cert.sh
                      ./.docker/gen-ss-cert.sh --company="mock-server" \
                        --sans="DNS:github.com, DNS:*.github.com, DNS:*.circleci.com" \
                        --out-dir="./.docker/ssl" \
                        --skip-append-to-ca -v \
                        "circleci.com"
                      ls -la ./.docker/ssl
                      docker build --rm -f .docker/mock-server/Dockerfile -t mock-server --progress plain .
            - run:
                  name: "Run tests against mock server environment"
                  command: |
                      docker run -it \
                          --rm \
                          --add-host "api.circleci.com:127.0.0.1" \
                          --add-host "app.circleci.com:127.0.0.1" \
                          --add-host "github.com:127.0.0.1" \
                          --add-host "api.github.com:127.0.0.1" \
                          --env-file .docker/mock-server/integration-test.env \
                          mock-server

    integration-github-actions:
        executor: base
        environment:
            GITHUB_ACTIONS: true
            PARAM_OWNER_SLASH_REPO: kohirens/version-release
            RELEASE_TAG: 0.0.1
            PARAM_TAG_ENV_VAR: RELEASE_TAG
        steps:
            - attach_workspace: { at: . }
            - vr/gh-has-release:
                  owner: kohirens
                  repo: version-release
                  tag_env_var: RELEASE_TAG
            - run:
                  name: Test gh-has-release.sh Script
                  command: echo "success"

workflows:
    quality-checks:
        jobs:
            - co:
                  filters: *branches-to-skip
            - bats/run:
                  context: <<pipeline.parameters.ctx_auto_release>>
                  pre-steps: *pre-attach
                  requires: [ co ]
                  path: ./src/tests
            - shellcheck/check:
                  pre-steps: *pre-attach
                  requires: [ co ]
                  dir: ./src/scripts
                  exclude: SC2148
            - vr/publish-docker-hub:
                  name: "publish-dev-image"
                  context: << pipeline.parameters.ctx_docker_hub >>
                  requires: [ bats/run, shellcheck/check ]
                  dockerfile: ".docker/vr/Dockerfile"
                  image_tag: "dev"
                  repository: << pipeline.parameters.orb_repo >>
            - orb-publish:
                  name: "publish-dev-orb"
                  context: << pipeline.parameters.ctx_auto_release >>
                  requires: [ publish-dev-image ]
                  ver_tag: "dev:<< pipeline.git.revision >>"
                  image_tag: "dev"
            - github-action-publish:
                  name: publish-github-action-files
                  context: << pipeline.parameters.ctx_auto_release >>
                  requires: [ publish-dev-image ]
            - ot/trigger-integration-tests-workflow:
                  name: trigger-integration-tests
                  context: << pipeline.parameters.ctx_auto_release >>
                  pipeline-param-map: >-
                      {\"run_integration_tests\": true, \"orb_version\": \"dev:<< pipeline.git.revision >>\"}
                  requires: [ publish-dev-orb, publish-github-action-files ]
        when:
            and:
                - not: << pipeline.parameters.run_integration_tests >>

    test-orb:
        jobs:
            - co
            - integration-test-vr:
                  context: <<pipeline.parameters.ctx_docker_hub>>
                  filters: *branches-to-skip
                  requires: [ co ]
            - integration-github-actions:
                  context: <<pipeline.parameters.ctx_auto_release>>
                  filters: *branches-to-skip
                  requires: [ co ]
#            - vr/publish-docker-hub:
#                  name: "Integration test publish-docker-hub job"
#                  context: << pipeline.parameters.ctx_docker_hub >>
#                  filters: *branches-to-skip
#                  requires: [ co ]
#                  dockerfile: ".docker/vr/Dockerfile"
#                  tags: "dummy"
#                  repository: << pipeline.parameters.orb_repo >>
#                  tag_env_var: "DUMMY_RELEASE_TAG" # this is defined in the CircleCI project environment settings.
#                  do_attach_workspace: true
#                  do_checkout: false
        when: <<pipeline.parameters.run_integration_tests>>

    workflow-selector:
        when:
            and:
                - equal: [ "workflow-selector", << pipeline.parameters.triggered_flow >> ]
                - equal: [ main, << pipeline.git.branch >> ]
        jobs:
            - vr/workflow-selector:
                  context: << pipeline.parameters.ctx_auto_release >>

    publish-changelog:
        when:
            and:
                - equal: [ "publish-changelog", << pipeline.parameters.triggered_flow >> ]
        jobs:
            - co
            - github-action-publish:
                  name: publish-github-action-files
                  requires: [ co ]
            - vr/publish-changelog:
                  context: << pipeline.parameters.ctx_auto_release >>
                  add_files_to_commit: << pipeline.parameters.additional_files_file >>
                  do_attach_workspace: true
                  do_checkout: false
                  requires: [ publish-github-action-files ]

    publish-release-tag:
        when:
            and:
                - equal: [ "publish-release-tag", << pipeline.parameters.triggered_flow >> ]
        jobs:
            - vr/tag-and-release:
                  context: << pipeline.parameters.ctx_auto_release >>

    on-tag-release:
        jobs:
            - co:
                  filters:
                      <<: *filter-semantic-tag
            - vr/publish-docker-hub:
                  name: "publish-prod-image-semver"
                  context: << pipeline.parameters.ctx_docker_hub >>
                  requires: [ co ]
                  filters:
                      <<: *filter-semantic-tag
                  do_attach_workspace: true
                  do_checkout: false
                  dockerfile: ".docker/vr/Dockerfile"
                  repository: << pipeline.parameters.orb_repo >>
                  tags: "<< pipeline.git.tag >> latest"
            - orb-publish:
                  name: "publish-prod-orb"
                  context: << pipeline.parameters.ctx_auto_release >>
                  requires: [ publish-prod-image-semver ]
                  ver_tag: << pipeline.git.tag >>
                  image_tag: "<< pipeline.git.tag >>"
                  filters:
                      <<: *filter-semantic-tag
