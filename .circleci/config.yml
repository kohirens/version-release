version: 2.1

orbs:
  # Chicken-Egg/Catch-22 scenario
  # So when the "test-pack" pipeline runs "dev-orb-version" will be "dev:alpha" from any previous publish.
  # Only after a successful run of "test-pack" does a new version of your orb exist with the latest features.
  # This means you cannot use new features in the integration test pipeline until afterward.
  # Updating integration test requires the following process:
  # 1. Push out new features/breaking changes without updating the integration pipeline.
  # 2. Make sure the pipeline succeeds.
  # 3. Update your integration pipeline to test the new features/breaking changes.
  # Again when the "integration-test_deploy" pipeline runs it will use the latest dev image set to the latest hash.
  # However, the whole CI config is compiled before building your latest dev orb (with its latest features). So any
  # calls to those features will throw errors and the pipeline will fail. SO the process above MUST be followed.
  vro: kohirens/version-release@<<pipeline.parameters.dev-orb-version>> # We are calling our orb before we build the latest dev version!
  orb-tools: circleci/orb-tools@10.1.0
  bats: circleci/bats@1.0
  shellcheck: circleci/shellcheck@2.0
  cli: circleci/circleci-cli@0.1.8

# Pipeline Parameters
## These parameters are used internally by orb-tools. Skip to the Jobs section.
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"

jobs:
  # Define one or more jobs which will utilize your orb's commands and parameters to validate your changes.
  integration-test-1:
    executor: vro/default
    steps:
      - checkout
      - vro/git-chglog-update:
          configFile: "src/tests/data/.chglog/config.yml"
          outputFile: "CHANGELOG-4000.md"
  orb-publish:
    executor: cli/default
    steps:
      - checkout
      - attach_workspace:
          at: '.'
      - run:
          name: "Publish orb at kohirens/version-release"
          command: |
            GIT_TAG=$(git tag --points-at HEAD)
            if [ -z "${GIT_TAG}" ]; then
              echo "no tag found in order to publish Orb"
              exit 1
            fi
            circleci orb --skip-update-check validate orb.yml
            circleci orb publish --skip-update-check orb.yml kohirens/version-release@${GIT_TAG} --token ${CIRCLE_TOKEN}

  debug_info:
    executor: vro/default
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: debug info
          command: |
            wd=$(pwd)
            who=$(whoami)
            printf "current directory: %s\n" "${wd}"
            printf "current user: %s\n" "${who}"
            echo "list current directory contents:"
            ls -la .
  tag-and-release:
    executor: vro/default
    steps:
      - add_ssh_keys:
          fingerprints:
            - "0a:16:aa:bf:a7:8b:2a:68:aa:62:28:63:20:11:62:4a"
      - checkout
      - vro/git-chglog-update
      - run:
          name: "Commit the changelog updates"
          command: |
            chglogUpdated=$(git diff --name-only -- CHANGELOG.md)
            if [ -z "${chglogUpdated}" ]; then
              echo "no changes detected in the CHANGELOG.md file"
              exit 1
            fi
            git add CHANGELOG.md
            git config --global user.name "${CIRCLE_USERNAME}"
            git config --global user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
            git checkout -b update-chglog-${CIRCLE_SHA1:0:7}
            git commit -m "[skip ci] Updated the CHANGELOG.md"
            git push origin update-chglog-${CIRCLE_SHA1:0:7}
            echo "${GH_TOKE}" > really-i-need-a-file.txt
            gh auth login --with-token < really-i-need-a-file.txt
            gh pr create --base main --head update-chglog-${CIRCLE_SHA1:0:7} --fill
            sleep 10
            gh pr merge --auto --rebase

workflows:
  # This workflow will run on every commit except main
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint:
          filters:
            branches:
              ignore: main
      - orb-tools/pack
      - shellcheck/check:
          dir: ./src/scripts
          exclude: SC2148
      - bats/run:
          path: ./src/tests
      - orb-tools/publish-dev:
          orb-name: kohirens/version-release
          context: orb-publishing
          requires:
            - orb-tools/lint
            - orb-tools/pack
            - bats/run
            - shellcheck/check
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev
      - debug_info:
          requires: [ orb-tools/pack ]

  # This `integration-test_deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Run any integration tests defined within the `jobs` key.
      - integration-test-1
  tag-release:
    jobs:
      - orb-tools/pack:
          filters:
            tags:
              only: /^v?\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - orb-publish:
          context: orb-publishing
          requires: [ orb-tools/pack ]
          filters:
            tags:
              only: /^v?\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
  # Only run on the main branch
  # 1. Checkout code.
  # 2. Run the changelog update command.
  # 3. If any, commit the changelog changes, ensure you use the CI [skip] tag to prevent a running CI from CI.
  # 4. Optionally add an approval gate here, this is to try and prevent merge collision, never approve more than one of these at a time as they will collide when trying to update main.
  # 5. Verify that main has not changed:
  #      a. If it has, then stop and fail with a message that main has change since this workflow began.
  #      b. If not, then proceed.
  # 6. Make a branch.
  #     a. push the branch.
  #     b. make a PR.
  #     c. merge the PR.
  # 5. Perform a fetch and rebase. Tag the latest main.
  # 6.
  tag-and-release-flow:
    jobs:
      - tag-and-release:
          context: orb-publishing
          filters:
            branches:
              only: main
