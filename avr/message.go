package main

var stderr = struct {
	ChgLogAutoUpdate,
	ClosingFile,
	CommitAlreadyTagged,
	GitHubServer,
	HashNotInChangelog,
	HashNotInLog,
	InvalidCommit,
	InvalidSemVer,
	KnownSshKeys,
	MergeType,
	MergeTypeEmpty,
	MissingEnv,
	NoChangelogChanges,
	NoSemverTag,
	OpenFile,
	ParseGitHubRepoEnvVar,
	PublishChangelogArgs,
	PublishReleaseTagArgs,
	SetGitCliffFooter,
	WorkDir,
	WorkflowSelectorInput string
}{
	ChgLogAutoUpdate:      "abort, the last commit contains an auto update to the CHANGELOG.md",
	ClosingFile:           "could not clos file %v: %v",
	CommitAlreadyTagged:   "commit %v is already tagged",
	GitHubServer:          "GitHub server is not set",
	HashNotInChangelog:    "changelog did not contain the hash %v",
	HashNotInLog:          "last git commit message did not contain the changelog hash %v",
	InvalidCommit:         "invalid commit given %v",
	InvalidSemVer:         "invalid semantic version given %v",
	KnownSshKeys:          "KnownSshKeys take the host as the only argument",
	MergeType:             "invalid merge type %v",
	MergeTypeEmpty:        "merge-type was set to an empty string",
	MissingEnv:            "%s environment variable is not set",
	NoChangelogChanges:    "the changelog has no changes to be committed",
	NoSemverTag:           "version is empty",
	OpenFile:              "could not open file %v: %v",
	ParseGitHubRepoEnvVar: "could not parse %v",
	PublishChangelogArgs:  "path to the changelog is a required argument to run this command, see -help",
	PublishReleaseTagArgs: "3 arguments are required to run this command, see -help",
	SetGitCliffFooter:     "could not set the git-cliff footer environment variable %v: :%v",
	WorkDir:               "failed to clean working directory path: %v",
	WorkflowSelectorInput: "workflow-selector requires arguments changelog file and commit, see -help",
}

var stdout = struct {
	Branch,
	CciChangelog,
	ChgLogUpToDate,
	ChgLogNotUpToDate,
	CurrentVersion,
	CurrentVer,
	DbgCommitLog,
	GaChangelog,
	GhPublishChgLog,
	GitStatus,
	Match,
	NextSemVer,
	Nothing,
	NoChangesToTag,
	NoWorkflowSelected,
	ReleaseTag,
	SemVer,
	StartWorkflow,
	SubCla,
	Wd,
	WorkDir string
}{
	Branch:             "branch %v",
	CciChangelog:       "trigger %v update changelog workflow",
	ChgLogUpToDate:     "the changelog is up to date",
	ChgLogNotUpToDate:  "the changelog is not up to date\nchangelog status:\n%s",
	CurrentVersion:     "%v, %v",
	CurrentVer:         "current version %v",
	DbgCommitLog:       "debug commit log:\n%v",
	GaChangelog:        "GitHub Actions update changelog",
	GhPublishChgLog:    "triggered a publish-changelog workflow on GitHub Actions",
	GitStatus:          "git status output = %s",
	Match:              "entry for %v in the changelog was found, its safe to assume the changelog is up-to-date",
	NoChangesToTag:     "next semantic version is empty indicating there are no release changes to tag and publish",
	Nothing:            "nothing to do, bye!",
	NoWorkflowSelected: "no workflow has been selected",
	ReleaseTag:         "releasing %v",
	SemVer:             "semantic version set to %v",
	StartWorkflow:      "starting %v workflow",
	SubCla:             "sub-command line arguments: %v",
	WorkDir:            "working directory: %v",
}

var um = map[string]string{
	"help":                            "display this help",
	"version":                         "display version information",
	"cicd":                            "set the CI/CD platform, options are circleci|github (default: circleci).",
	"branch":                          "set the branch to evaluate commit message and or tag",
	"wd":                              "set the working directory of the Git repository to evaluate",
	"gh_api_url":                      "GitHub API URL (default: https://api/github.com)",
	"semver":                          "set the semantic version for the automated release",
	"publish_changelog_merge_type":    "type of merge to perform when closing the changelog pull request",
	"publish_changelog_github_server": "GitHub server domain name",
}
