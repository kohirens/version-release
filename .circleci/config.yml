version: 2.1

orbs:
    bats: circleci/bats@1.0.0
    cli: circleci/circleci-cli@0.1.9
    orb-tools: circleci/orb-tools@12.0.3
    ot: circleci/orb-tools@10.1.0
    shellcheck: circleci/shellcheck@3.1.1
    vr: kohirens/version-release@<< pipeline.parameters.orb_version >>

filter-semantic-tag: &filter-semantic-tag
    tags:
        only: /^v?\d+\.\d+\.\d+$/
    branches:
        ignore: /.*/

main-filter: &branches-to-skip
    branches:
        ignore: /main|auto-update-changelog/

pre-attach: &pre-attach
    - attach_workspace: { at: "." }

parameters:
    ctx_auto_release:
        default: "kohirens-automation"
        description: Release automation
        type: string
    ctx_docker_hub:
        default: "kohirens-automation-dockerhub"
        description: Container automation
        type: string
    orb_version:
        default: "dev:alpha"
        description: >
            The development version of the orb to test.
            This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
            A "dev:alpha" version must exist for the initial pipeline run.
        type: string
    orb_repo:
        default: "kohirens/version-release"
        description: Orb repository
        type: string
    triggered_flow:
        default: ""
        description: Workflow to be executed.
        type: string
    continued_automation:
        default: ""
        description: Automation workflow description
        type: string
    ssh_finger:
        description: SSH fingerprint.
        type: string
        default: "0a:16:aa:bf:a7:8b:2a:68:aa:62:28:63:20:11:62:4a"
    run_integration_tests:
        type: boolean
        default: false
        description: Run integration tests

executors:
    image-builder:
        docker: # see https://circleci.com/docs/building-docker-images/#docker-version
            - image: docker:20.10.18-git
              auth:
                  username: ${DH_USER}
                  password: ${DH_PASS}
        resource_class: small
    kohirens-ci:
        docker: # see https://circleci.com/developer/images/image/cimg/base
            - image: cimg/base:edge
              auth:
                  username: ${DH_USER}
                  password: ${DH_PASS}
        resource_class: small

jobs:
    co:
        executor: vr/default
        steps:
            - checkout
            - persist_to_workspace: { root: ".",  paths: [ "*" ] }

    orb-publish:
        parameters:
            ver_tag:
                default: "dev:alpha"
                description: version tag for the image
                type: string
        executor: cli/default
        steps:
            - attach_workspace: { at: "." }
            - run:
                  name: "Publish Orb"
                  command: |
                      BUILD_VER=<<parameters.ver_tag>>
                      if [ -z "${BUILD_VER}" ]; then
                        echo "no tag found in order to publish Orb"
                        exit 1
                      fi
                      circleci orb --skip-update-check pack src > orb.yml
                      circleci orb --skip-update-check validate orb.yml
                      circleci orb publish --skip-update-check orb.yml << pipeline.parameters.orb_repo >>@${BUILD_VER} --token ${CIRCLE_TOKEN}

    publish-image:
        parameters:
            ver_tag:
                default: "latest"
                description: version tag for the image
                type: string
            image_repo:
                type: string
        environment:
            DOCKER_BUILDKIT: 1
        executor: image-builder
        steps:
            - attach_workspace: { at: "." }
            - setup_remote_docker:
                  docker_layer_caching: true
            - run:
                  name: Build and push Docker image
                  command: |
                      export BUILD_VER="<<parameters.ver_tag>>"
                      if [ -z "${BUILD_VER}" ]; then
                          echo "ver_tag parameters is not set, or is empty"
                          exit 1
                      fi
                      export DH_IMAGE="<<parameters.image_repo>>"
                      echo "${DH_PASS}" | docker login -u "${DH_USER}" --password-stdin
                      echo ""
                      echo "Building ${DH_IMAGE} Version \"${BUILD_VER}\""
                      docker build --rm \
                          -f .docker/vr/Dockerfile \
                          -t "${DH_IMAGE}" \
                          -t "${DH_IMAGE}:${BUILD_VER}" \
                          --progress plain \
                          --target "release" .
                      echo ""
                      echo "Pushing ${DH_IMAGE} Version \"${BUILD_VER}\""
                      docker push "${DH_IMAGE}:${BUILD_VER}"
                      echo ""
                      echo "Cleaning up ${DH_IMAGE} Version \"${BUILD_VER}\""
                      docker rmi "${DH_IMAGE}:${BUILD_VER}"

    integration-test-vr:
        docker: # see https://circleci.com/docs/building-docker-images/#docker-version
            - image: docker:20.10.18-git
              auth:
                  username: ${DH_USER}
                  password: ${DH_PASS}
        environment:
            DOCKER_BUILDKIT: 1
        steps:
            - attach_workspace: { at: "." }
            - setup_remote_docker:
                  docker_layer_caching: true
            - run:
                  name: "Build mock server tests environment"
                  command: |
                      docker build --rm -f .docker/mock-server/Dockerfile -t mock-server --progress plain .
            - run:
                  name: "Run tests against mock server environment"
                  command: |
                      docker run -it \
                          --rm \
                          --add-host "api.circleci.com:127.0.0.1" \
                          --add-host "app.circleci.com:127.0.0.1" \
                          --add-host "github.com:127.0.0.1" \
                          --add-host "api.github.com:127.0.0.1" \
                          --env-file .docker/mock-server/integration-test.env \
                          mock-server

workflows:
    quality-checks:
        jobs:
            - co:
                  filters: *branches-to-skip
            - bats/run:
                  pre-steps: *pre-attach
                  requires: [ co ]
                  path: ./src/tests
            - orb-tools/lint:
                  pre-steps: *pre-attach
                  requires: [ co ]
            - shellcheck/check:
                  pre-steps: *pre-attach
                  requires: [ co ]
                  dir: ./src/scripts
                  exclude: SC2148
            - publish-image:
                  name: "publish-dev-image"
                  context: << pipeline.parameters.ctx_docker_hub >>
                  requires: [ bats/run, orb-tools/lint, shellcheck/check ]
                  image_repo: << pipeline.parameters.orb_repo >>
            - orb-tools/pack:
                  pre-steps: *pre-attach
                  checkout: false
                  requires: [ publish-dev-image ]
            - orb-tools/publish:
                  name: "publish-dev-orb"
                  context: << pipeline.parameters.ctx_auto_release >>
                  requires: [ orb-tools/pack ]
                  attach_workspace: true
                  checkout: false
                  github_token: "GH_TOKEN"
                  orb_name: << pipeline.parameters.orb_repo >>
                  vcs_type: << pipeline.project.type >>
            - ot/trigger-integration-tests-workflow:
                  name: trigger-integration-tests
                  context: << pipeline.parameters.ctx_auto_release >>
                  pipeline-param-map: >-
                      {\"run_integration_tests\": true, \"orb_version\": \"dev:${CIRCLE_SHA1}\"}
                  requires: [ publish-dev-orb ]
        when:
            and:
                - not: << pipeline.parameters.run_integration_tests >>

    test-orb:
        jobs:
            - co
            - integration-test-vr:
                  context: <<pipeline.parameters.ctx_docker_hub>>
                  filters: *branches-to-skip
                  requires: [ co ]
        when: << pipeline.parameters.run_integration_tests >>

    workflow-selector:
        when:
            and:
                - equal: ["workflow-selector", << pipeline.parameters.triggered_flow >>]
                - equal: [ main, << pipeline.git.branch >> ]
        jobs:
            - vr/workflow-selector:
                  context: << pipeline.parameters.ctx_auto_release >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

#    workflow-picker:
#        jobs:
#            - choose-a-workflow:
#                  filters: { branches: { only: main } }
#                  triggered_flow: <<pipeline.parameters.triggered_flow>>

    publish-changelog:
        when:
            and:
                - equal: ["publish-changelog", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/publish-changelog:
                  context: << pipeline.parameters.ctx_auto_release >>
                  ssh_finger: << pipeline.parameters.ssh_finger >>

    publish-release-tag:
        when:
            and:
                - equal: ["publish-release-tag", << pipeline.parameters.triggered_flow >>]
        jobs:
            - vr/tag-and-release:
                  context: << pipeline.parameters.ctx_auto_release >>

    on-tag-release:
        when: # see https://discuss.circleci.com/t/tag-matching-using-condition-an-example/45876
            or:
                - matches: { pattern: "^v?\\d+\\.\\d+\\.\\d+$", value: << pipeline.git.tag >> }
        jobs:
            - orb-publish:
                  context: << pipeline.parameters.ctx_auto_release >>
                  ver_tag: << pipeline.git.tag >>
                  filters:
                      <<: *filter-semantic-tag
            - publish-image:
                  name: "publish-prod-image"
                  context: << pipeline.parameters.ctx_docker_hub >>
                  requires: [ orb-tools/lint, orb-tools/pack, bats/run, shellcheck/check ]
                  image_repo: << pipeline.parameters.orb_repo >>
                  ver_tag: << pipeline.git.tag >>
                  filters:
                      <<: *filter-semantic-tag
