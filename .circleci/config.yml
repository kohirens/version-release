version: 2.1

orbs:
  vro: kohirens/version-release@<<pipeline.parameters.dev-orb-version>>
  orb-tools: circleci/orb-tools@10.1.0
  bats: circleci/bats@1.0
  shellcheck: circleci/shellcheck@2.0
  cli: circleci/circleci-cli@0.1.8

# Pipeline Parameters
## These parameters are used internally by orb-tools. Skip to the Jobs section.
parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:alpha" version must exist for the initial pipeline run.
    type: string
    default: "dev:alpha"
  ssh-finger:
    description: SSH fingerprint.
    type: string
    default: "0a:16:aa:bf:a7:8b:2a:68:aa:62:28:63:20:11:62:4a"
  run-tag-and-release:
    description: Run tag and release workflow.
    type: boolean
    default: false

jobs:
  # Define one or more jobs which will utilize your orb's commands and parameters to validate your changes.
  integration-test-1:
    executor: vro/default
    steps:
      - checkout
      - vro/git-chglog-update:
          configFile: "src/tests/data/.chglog/config.yml"
          outputFile: "CHANGELOG-4000.md"
  orb-publish:
    executor: cli/default
    steps:
      - checkout
      - attach_workspace:
          at: '.'
      - run:
          name: "Publish orb at kohirens/version-release"
          command: |
            GIT_TAG=$(git tag --points-at HEAD)
            if [ -z "${GIT_TAG}" ]; then
              echo "no tag found in order to publish Orb"
              exit 1
            fi
            circleci orb --skip-update-check validate orb.yml
            circleci orb publish --skip-update-check orb.yml kohirens/version-release@${GIT_TAG} --token ${CIRCLE_TOKEN}
  debug_info:
    executor: vro/default
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: debug info
          command: |
            wd=$(pwd)
            who=$(whoami)
            printf "current directory: %s\n" "${wd}"
            printf "current user: %s\n" "${who}"
            echo "list current directory contents:"
            ls -la .

workflows:
  # This workflow will run on every commit except main
  test-pack:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - orb-tools/lint:
          filters: &main-and-skip
            branches:
              ignore: /main|updated-changelog-skip-ci/
      - orb-tools/pack:
          filters: *main-and-skip
      - shellcheck/check:
          dir: ./src/scripts
          exclude: SC2148
          filters: *main-and-skip
      - bats/run:
          path: ./src/tests
          filters: *main-and-skip
      - orb-tools/publish-dev:
          orb-name: kohirens/version-release
          context: orb-publishing
          requires:
            - orb-tools/lint
            - orb-tools/pack
            - bats/run
            - shellcheck/check
          filters: *main-and-skip
      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - orb-tools/publish-dev
          filters: *main-and-skip
      - debug_info:
          requires: [ orb-tools/pack ]
          filters: *main-and-skip

  # This `integration-test-deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - integration-test-1:
          filters:
            branches:
              ignore: /main|updated-changelog-skip-ci/
  # Only run when branch is main and run-tag-and-release=false
  # 1. Verify there are taggable changes
  # 2. There is no tagging in process for the commit hash.
  publish-changelog:
    jobs:
      - vro/update-and-merge-changelog:
          context: orb-publishing
          filters:
            branches:
              only: main
          pre-steps: [ checkout, attach_workspace: { at: '.' } ]
          sshFinger: << pipeline.parameters.ssh-finger >>
  # Only run when the branch is main and run-tag-and-release=true
  # 1. Update the changelog.
  # 2. Merge the changelog to main.
  # 3. Publish a release tag.
  tag-and-release:
    jobs:
      - vro/tag-and-release:
          filters:
            branches:
              only: main
          context: orb-publishing
          pre-steps: [ checkout, attach_workspace: { at: '.' } ]
  publish-orb:
    jobs:
      - orb-tools/pack:
          filters:
            tags:
              only: /^v?\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
      - orb-publish:
          context: orb-publishing
          requires: [ orb-tools/pack ]
          filters:
            tags:
              only: /^v?\d+\.\d+\.\d+$/
            branches:
              ignore: /.*/
